# src/tasks/notifications.py
from __future__ import annotations

import asyncio
import logging
from typing import Iterable, List, Sequence, Optional

from aiogram import Bot
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramForbiddenError,
    TelegramNetworkError,
    TelegramRetryAfter,
)
from tortoise import timezone
from tortoise.expressions import Q

from src.config import config
from src.models import User, ApplicationResult

logger = logging.getLogger(__name__)


# –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
TEST_LINKS_LIMIT = 50


def _unique_preserve_order(items: Iterable[str]) -> List[str]:
    seen = set()
    out: List[str] = []
    for x in items:
        if x is None:
            continue
        sx = str(x)
        if sx not in seen:
            seen.add(sx)
            out.append(sx)
    return out


def _build_message(max_total_vacancies: int, sent_sum: int, skipped_ids: Sequence[str]) -> str:
    if skipped_ids:
        links = [f"https://hh.ru/vacancy/{vid}" for vid in skipped_ids[:TEST_LINKS_LIMIT]]
        extra = len(skipped_ids) - len(links)
        links_block = "\n".join(links) + (f"\n‚Ä¶ –∏ –µ—â—ë {extra} —Å —Ç–µ—Å—Ç–∞–º–∏" if extra > 0 else "")
    else:
        links_block = "‚Äî –Ω–µ—Ç"

    # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ parse_mode ‚Äî Telegram —Å–∞–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç http-—Å—Å—ã–ª–∫–∏ –≤ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
    text = (
        "üîî –û—Ç—á—ë—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π\n\n"
        f"‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–π –Ω–∞–π–¥–µ–Ω–æ (–º–∞–∫—Å–∏–º—É–º –∑–∞ –ø—Ä–æ–≥–æ–Ω): {max_total_vacancies}\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {sent_sum}\n"
        "‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–µ—Å—Ç–∞–º–∏ (–æ—Ç–∫–ª–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω):\n"
        f"{links_block}"
    )
    return text


async def _send_message(chat_id: int, text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫—Ä–∞—Ç–∫–æ–∂–∏–≤—É—â–µ–≥–æ –±–æ—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ —Ç–µ–∫—É—â–µ–º—É event loop.
    –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π bot –∏–∑ src.bot_init, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ü–∏–∫–ª–æ–≤.
    """
    async with Bot(token=config.bot.token.get_secret_value(), session=AiohttpSession()) as _bot:
        await _bot.send_message(chat_id=chat_id, text=text, disable_notification=True)


async def _process_user(user_id: int) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      - –≤–∑—è—Ç—å –≤—Å–µ ApplicationResult —Å notified=False
      - –ø–æ—Å—á–∏—Ç–∞—Ç—å max(total_vacancies), —Å—É–º–º—É sent_applications
      - —Å–æ–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ skipped_tests –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
      - –ø–æ–º–µ—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ notified=True
    """
    # –í—ã–±–æ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results: List[ApplicationResult] = await ApplicationResult.filter(
        Q(user_id=user_id) & Q(notified=False)
    ).all()

    if not results:
        logger.info("[notifications] user_id=%s: no fresh results, skip", user_id)
        return

    # 3) –º–∞–∫—Å–∏–º—É–º total_vacancies
    max_total = max(r.total_vacancies for r in results)

    # –ö–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ ‚Äî —Å—É–º–º–∞—Ä–Ω–æ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    sent_sum = sum(r.sent_applications for r in results)

    # 4) —Å–æ–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ skipped_tests
    all_skipped: List[str] = []
    for r in results:
        if r.skipped_tests:
            # –æ–∂–∏–¥–∞–µ—Ç—Å—è JSON-–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫/—á–∏—Å–µ–ª
            all_skipped.extend([str(x) for x in r.skipped_tests])

    unique_skipped = _unique_preserve_order(all_skipped)

    # 5) —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = _build_message(max_total_vacancies=max_total, sent_sum=sent_sum, skipped_ids=unique_skipped)

    # 6) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    chat_id = int(user_id)
    try:
        logger.info("[notifications] sending to user_id=%s (results=%d, max_total=%d, sent_sum=%d, skipped=%d)",
                    user_id, len(results), max_total, sent_sum, len(unique_skipped))
        await _send_message(chat_id, text)

    except TelegramRetryAfter as e:
        logger.warning("[notifications] rate limit for user_id=%s, retry after %s sec", user_id, e.retry_after)
        await asyncio.sleep(e.retry_after)
        try:
            await _send_message(chat_id, text)
            logger.info("[notifications] sent on retry to user_id=%s", user_id)
        except Exception as e2:
            logger.exception("[notifications] second attempt failed for user_id=%s: %s", user_id, e2)
            return  # –Ω–µ –ø–æ–º–µ—á–∞–µ–º notified, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–≤–∞–∂–¥—ã

    except TelegramForbiddenError:
        logger.warning("[notifications] cannot send to user_id=%s: bot blocked or user didn't start the bot", user_id)
        # –ú–æ–∂–Ω–æ –ø–æ–º–µ—á–∞—Ç—å notified, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤–ø—É—Å—Ç—É—é; —Ä–µ—à–∞–π—Ç–µ –ø–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ.
        # –ó–¥–µ—Å—å –ù–ï –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, –≤–¥—Ä—É–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç.
        return

    except (TelegramBadRequest, TelegramNetworkError) as e:
        logger.exception("[notifications] telegram/network error for user_id=%s: %s", user_id, e)
        return

    except Exception as e:
        logger.exception("[notifications] unexpected error for user_id=%s: %s", user_id, e)
        return

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–∞–∫ notified.
    ids_to_update = [r.id for r in results]
    if ids_to_update:
        now = timezone.now()
        updated = await ApplicationResult.filter(id__in=ids_to_update).update(
            notified=True, notified_at=now
        )
        logger.info("[notifications] marked notified user_id=%s, updated=%d", user_id, updated)


async def notification_task(user_id: Optional[int | str] = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
      - –µ—Å–ª–∏ user_id –ø–µ—Ä–µ–¥–∞–Ω ‚Äî —Ç–æ–ª—å–∫–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
      - –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
    """
    if user_id is not None:
        await _process_user(int(user_id))
        return

    # 1) –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    # –∏ –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (user_status='active')
    user_ids: List[int] = await User.filter(
        Q(notifications=True) & Q(user_status="active")
    ).values_list("id", flat=True)

    if not user_ids:
        logger.info("[notifications] no users with notifications enabled")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–ø—Ä–æ—â–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å rate-limit Telegram)
    # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –±–∞—Ç—á–∏—Ç—å/–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º.
    for uid in user_ids:
        await _process_user(int(uid))